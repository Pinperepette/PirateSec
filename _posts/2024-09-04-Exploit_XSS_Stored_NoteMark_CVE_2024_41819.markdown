
---
layout: post
title: Vulnerabilità Stored XSS in NoteMark (CVE-2024-41819)
date: 2024-09-04
categories: [security, ransomware]
---

# Vulnerabilità Stored XSS in NoteMark (CVE-2024-41819)

## Introduzione

La vulnerabilità **Stored Cross-Site Scripting (XSS)**, identificata nel software NoteMark versione 0.13.0 e versioni precedenti, è stata scoperta da **Alessio Romano (sfoffo)** e ha ricevuto la CVE **CVE-2024-41819**. Questa vulnerabilità permette a un utente malintenzionato di iniettare codice JavaScript malevolo nei contenuti salvati di una nota, che verrà eseguito quando altri utenti visualizzano quella nota. Il problema è particolarmente pericoloso perché consente un'esecuzione persistente del payload di JavaScript all'interno dell'applicazione.

NoteMark è un'applicazione per la gestione delle note basata su Markdown, utilizzata per l'organizzazione di informazioni in formato strutturato. In questo contesto, l'iniezione di codice JavaScript può avere conseguenze gravi per la sicurezza, tra cui furto di cookie, modifica di sessioni o esecuzione di azioni non autorizzate a nome degli utenti.

## Dettagli della Vulnerabilità

La vulnerabilità si manifesta durante il processo di rendering del markdown, in cui non viene eseguita una corretta sanificazione del contenuto, consentendo l'inserimento di codice JavaScript in un collegamento. L'utente malintenzionato può sfruttare questa debolezza creando una nota con un payload XSS che, una volta visualizzato da un altro utente, eseguirà il codice malevolo.

### Esempio di Payload

Nel markdown della nota è possibile inserire il seguente payload:
\`\`\`markdown
[xss-link](javascript:alert(1))
\`\`\`

Quando la nota viene salvata e successivamente visualizzata nell'editor in modalità "Rendered", il browser eseguirà il codice JavaScript all'interno del link, provocando la visualizzazione di un pop-up con l'alert.

## Procedura per Riprodurre la Vulnerabilità

Per dimostrare la vulnerabilità, è necessario seguire questi passaggi:

1. **Accedi** all'applicazione NoteMark con un account utente.
2. **Crea una nuova nota** o apri una nota esistente.
3. Nella vista della nota, fai clic sulla scheda "Editor" per accedere alla modalità di modifica.
4. Inserisci il seguente payload nel corpo della nota:
   \`\`\`markdown
   [xss-link](javascript:alert(1))
   \`\`\`
5. **Salva** la nota.
6. Fai clic sulla scheda "Rendered" per visualizzare la versione renderizzata del markdown.
7. Fai clic sul link creato all'interno della nota per attivare il payload e far comparire l'alert.

Questo exploit dimostra come il contenuto non sanificato venga eseguito dal browser.

### Richiesta HTTP per Iniettare il Payload

Ecco un esempio di richiesta HTTP che può essere utilizzata per iniettare il payload in una nota tramite l'API dell'applicazione:

```http
PUT /api/notes/<note-uuid>/content HTTP/1.1
Host: localhost:8000
Accept: */*
Content-Type: text/plain;charset=UTF-8
Content-Length: 34
Sec-Fetch-Site: same-origin
Authorization: Bearer <TOKEN>

[xss-link](javascript:alert(1))
```

In questo esempio, il parametro \`<note-uuid>\` deve essere sostituito con l'UUID della nota specifica e \`<TOKEN>\` con il token di autenticazione dell'utente. La richiesta inietta il payload XSS nella nota corrispondente.

## Impatto della Vulnerabilità

Il tipo di vulnerabilità XSS (Stored) consente a un utente malintenzionato di iniettare codice maligno che verrà eseguito ogni volta che un altro utente accede o visualizza il contenuto compromesso. Le potenziali conseguenze includono:

- **Furto di cookie** e altre informazioni sensibili;
- **Esecuzione di azioni a nome di un altro utente**;
- **Defacement** o alterazione del contenuto dell'applicazione.

Data la natura del software NoteMark, che potrebbe essere utilizzato in ambienti collaborativi, l'impatto di una vulnerabilità XSS potrebbe essere significativo, poiché il codice malevolo potrebbe diffondersi facilmente tra gli utenti che condividono note o collaborano sui documenti.

## Patch e Mitigazioni

La vulnerabilità è stata corretta nella commit [a0997facb82f85bfb8c0d497606d89e7d150e182](https://github.com/enchant97/note-mark/commit/a0997facb82f85bfb8c0d497606d89e7d150e182), disponibile nel repository ufficiale di NoteMark su GitHub. Gli sviluppatori hanno implementato una corretta sanificazione del contenuto markdown, prevenendo l'esecuzione di codice JavaScript non autorizzato.

### Raccomandazioni:

- **Aggiornamento**: È fondamentale che tutti gli utenti e amministratori di NoteMark aggiornino il software all'ultima versione disponibile che risolve il problema (0.13.1 o successivi).
- **Sanificazione del contenuto**: Se si utilizza un sistema di gestione di note basato su markdown, assicurarsi che venga implementata una corretta sanificazione dei dati in entrata per evitare l'inserimento di codice dannoso.
- **Validazione lato server**: Oltre alla sanificazione lato client, è buona norma implementare meccanismi di validazione lato server per filtrare e impedire l'iniezione di contenuti pericolosi.

## Conclusioni

La vulnerabilità Stored XSS (CVE-2024-41819) in NoteMark rappresenta un chiaro esempio di come la mancanza di una corretta gestione del rendering del markdown possa esporre gli utenti a rischi significativi. Exploit di questo tipo dimostrano l'importanza della sanificazione e validazione del contenuto, specialmente in applicazioni che gestiscono input utente non affidabile. Gli utenti di NoteMark dovrebbero assicurarsi di aggiornare immediatamente il software e applicare best practice per la sicurezza.

**Fonti e Riferimenti:**
- [CVE-2024-41819](https://notes.sfoffo.com/contributions/2024-contributions/cve-2024-41819)
- [Commit su GitHub](https://github.com/enchant97/note-mark/commit/a0997facb82f85bfb8c0d497606d89e7d150e182)
- [Advisory di sicurezza su GitHub](https://github.com/enchant97/note-mark/security/advisories/GHSA-rm48-9mqf-8jc3)
