---
layout: post
title:  "Corso Heap Overflow: Debugging e Analisi di Exploit"
date:   2024-09-08 16:00:00 +0200
categories: heap-overflow
tags: [heap-overflow, exploit, debugging, analisi]
---

# Corso Heap Overflow: Debugging e Analisi di Exploit

Dopo aver esplorato le vulnerabilità e le tecniche di bypass delle protezioni, è essenziale comprendere come utilizzare strumenti di **debugging** per analizzare gli exploit e determinare la loro efficacia. In questa lezione, ci concentreremo sulle tecniche di debugging, gli strumenti utilizzati per analizzare heap overflow, e su come ottimizzare gli exploit per ottenere il massimo risultato.

## 1. Strumenti di Debugging per Heap Overflow

### 1.1 GDB (GNU Debugger)

**GDB** è il debugger standard per i sistemi Unix-like (Linux e macOS) ed è uno strumento fondamentale per analizzare i crash e comprendere i dettagli interni di un exploit. Estendendo GDB con plugin come **Pwndbg**, possiamo aggiungere funzionalità specifiche per l'exploit development, come la visualizzazione delle strutture dell'heap, l'analisi dei registri e la gestione della memoria.

#### Installazione di GDB e Pwndbg

- **Su Linux**: `sudo apt install gdb`
- **Su macOS** (con Homebrew): `brew install gdb`
- **Installazione di Pwndbg**:

```bash
git clone https://github.com/pwndbg/pwndbg
cd pwndbg && ./setup.sh
```

### 1.2 LLDB (Low-Level Debugger)

**LLDB** è il debugger fornito da **LLVM** ed è nativamente disponibile su macOS e su alcune distribuzioni Linux. Ha un'interfaccia moderna e offre una buona alternativa a GDB. Può essere utilizzato per analizzare crash di heap overflow e, insieme a strumenti come **LLDB-MI**, può essere integrato in ambienti di sviluppo come Visual Studio Code.

#### Installazione di LLDB

- **Su Linux**: `sudo apt install lldb`
- **Su macOS**: Preinstallato con Xcode (`xcode-select --install` per installare gli strumenti di sviluppo).

### 1.3 Heap Exploit Tools

Esistono diversi strumenti specializzati per l'analisi delle vulnerabilità nell'heap. Alcuni di questi includono:

- **Libc-database**: Raccolta di versioni della libreria **libc** per l'analisi delle vulnerabilità legate alla libreria standard.
- **HeapViewer**: Uno strumento di visualizzazione dell'heap che facilita l'analisi delle allocazioni e delle strutture di memoria.
- **Mona.py**: Plugin per **Immunity Debugger** che aiuta nell'analisi degli exploit su Windows. È particolarmente utile per analizzare crash causati da heap overflow su sistemi Windows.

## 2. Debugging di un Exploit di Heap Overflow

### 2.1 Configurazione dell'Ambiente di Debugging

Prima di eseguire l'exploit, è fondamentale configurare l'ambiente di debugging. Segui questi passaggi:

1. **Avvia il programma vulnerabile**: Carica il programma che intendi attaccare in **GDB** o **LLDB**.
2. **Imposta i breakpoint**: Imposta breakpoint nei punti critici del programma, ad esempio subito dopo la chiamata a `malloc()` o `free()`.
3. **Esegui il programma**: Avvia l'esecuzione del programma in modalità di debug.

### 2.2 Monitorare la Memoria Heap

Quando si analizza un exploit di heap overflow, è importante tenere traccia delle allocazioni di memoria. Con **Pwndbg**, puoi facilmente visualizzare lo stato dell'heap e monitorare i chunk:

```bash
heap chunks
```

Questo comando visualizza i chunk attualmente allocati e ti permette di osservare se un chunk è stato corrotto o sovrascritto.

### 2.3 Analisi dei Crash

Quando si verifica un crash durante l'esecuzione di un exploit, è possibile utilizzare **GDB** o **LLDB** per analizzare i registri e determinare cosa ha causato il crash.

#### Comandi utili in GDB:

- **`info registers`**: Visualizza lo stato attuale dei registri.
- **`x /10x $esp`**: Visualizza i contenuti dello stack (sostituisci `esp` con `rsp` su sistemi a 64 bit).
- **`backtrace`**: Mostra la chiamata della funzione che ha causato il crash.

#### Analizzare l'Instruction Pointer

Un obiettivo comune durante il debugging di un heap overflow è verificare se siamo riusciti a sovrascrivere l'**instruction pointer** (EIP o RIP su architetture a 64 bit). Se il **program counter** punta a un'area di memoria controllata dall'attaccante, l'exploit ha buone possibilità di riuscita.

### 2.4 Visualizzazione della Heap Corruption

Con strumenti avanzati come **Pwndbg**, puoi ottenere una visione chiara delle allocazioni dell'heap e individuare facilmente le corruzioni.

```bash
heap bins
```

Questo comando ti consente di visualizzare i chunk presenti nei vari bin (fastbin, smallbin, largebin) e verificare se qualche chunk è stato corrotto o duplicato, come nel caso di un **fastbin attack**.

## 3. Debugging su Windows con Immunity Debugger

Se stai lavorando su un sistema Windows, puoi utilizzare **Immunity Debugger** per analizzare crash di heap overflow. Immunity Debugger è uno dei debugger più potenti su Windows, in quanto consente di analizzare buffer e heap overflow con facilità grazie a plugin come **Mona.py**.

### Esempio di Analisi con Mona.py

1. **Carica il programma**: Apri Immunity Debugger e carica il programma vulnerabile.
2. **Imposta un breakpoint**: Usa Mona.py per identificare gli indirizzi utili e impostare breakpoint in punti critici.
3. **Esegui l'exploit**: Mentre esegui l'exploit, Mona.py ti aiuterà a identificare eventuali sovrascritture e corruzioni nell'heap.

## 4. Esercitazione Pratica: Analisi di un Exploit

### Obiettivo

In questa esercitazione, utilizzeremo **GDB** e **Pwndbg** per analizzare un exploit di heap overflow su un programma vulnerabile.

### Passaggi

1. **Scarica un programma vulnerabile**: Usa un'applicazione open-source con una vulnerabilità nota di heap overflow (ad esempio, una macchina virtuale vulnerabile come quelle su Hack The Box).
2. **Configura GDB e Pwndbg**: Carica il programma in **GDB** con **Pwndbg** abilitato.
3. **Esamina l'heap**: Usa i comandi di Pwndbg per visualizzare le allocazioni dell'heap e identificare eventuali corruzioni.
4. **Lancia l'exploit**: Esegui l'exploit e analizza il crash utilizzando i comandi di GDB.
5. **Debug e ottimizzazione**: Individua i punti in cui l'exploit fallisce e ottimizza il codice per ottenere un risultato migliore.

## Conclusione

Il debugging è una parte fondamentale del processo di sviluppo di exploit per vulnerabilità di heap overflow. Con l'aiuto di strumenti come GDB, Pwndbg e Immunity Debugger, puoi analizzare crash, monitorare l'integrità dell'heap e perfezionare i tuoi exploit. Nella prossima lezione, esploreremo le tecniche avanzate per ottimizzare ulteriormente gli exploit e garantire la loro affidabilità.
